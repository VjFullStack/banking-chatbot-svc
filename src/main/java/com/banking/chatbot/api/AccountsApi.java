/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.banking.chatbot.api;


import org.threeten.bp.LocalDate;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;
import com.banking.chatbot.model.*;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-04-07T12:04:10.431528963Z[GMT]")
@Validated
public interface AccountsApi {

    @Operation(summary = "", description = "Get the balance for a specific account", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Account balance successfully retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),

            @ApiResponse(responseCode = "404", description = "Account not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))) })
    @RequestMapping(value = "/accounts/{account_number}/balance",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> accountsAccountNumberBalanceGet(@Parameter(in = ParameterIn.PATH, description = "The account number for which to retrieve the balance", required=true, schema=@Schema()) @PathVariable("account_number") String accountNumber);


    @Operation(summary = "Retrieve transaction history for an account", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "List of transactions", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),

            @ApiResponse(responseCode = "400", description = "Bad request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),

            @ApiResponse(responseCode = "404", description = "Account not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))) })
    @RequestMapping(value = "/accounts/{account_number}/transactions",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> accountsAccountNumberTransactionsGet(@Parameter(in = ParameterIn.PATH, description = "Account number for which transaction history is required", required=true, schema=@Schema()) @PathVariable("account_number") String accountNumber, @Parameter(in = ParameterIn.QUERY, description = "Start date of the transaction history" ,schema=@Schema()) @Valid @RequestParam(value = "start_date", required = false) LocalDate startDate, @Parameter(in = ParameterIn.QUERY, description = "End date of the transaction history" ,schema=@Schema()) @Valid @RequestParam(value = "end_date", required = false) LocalDate endDate, @Parameter(in = ParameterIn.QUERY, description = "Maximum number of transactions to retrieve (default 10)" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @Operation(summary = "Retrieve a single transaction for an account", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Transaction details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))),

            @ApiResponse(responseCode = "400", description = "Bad request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),

            @ApiResponse(responseCode = "404", description = "Transaction not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse4041.class))) })
    @RequestMapping(value = "/accounts/{account_number}/transactions/{transaction_id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Transaction> accountsAccountNumberTransactionsTransactionIdGet(@Parameter(in = ParameterIn.PATH, description = "Account number for which transaction is required", required=true, schema=@Schema()) @PathVariable("account_number") String accountNumber, @Parameter(in = ParameterIn.PATH, description = "Transaction ID", required=true, schema=@Schema()) @PathVariable("transaction_id") String transactionId);


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Account created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),

            @ApiResponse(responseCode = "400", description = "Bad request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))) })
    @RequestMapping(value = "/accounts",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> accountsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AccountsBody body);

}

